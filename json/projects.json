{
    "steam-game-club": {
        "name": "STEAM Game Club",
        "language": "JavaScript, Pug, CSS",
        "time": "Mar 2022 - Apr 2022",
        "demoURL": "https://steam-gameclub.herokuapp.com",
        "githubURL": "https://github.com/FrancesF6/STEAM_game_club",
        "about": "A full-stack web application using Node.js and SQLite3",
        "description": "This web application provides a platform for STEAM video game lovers.<br>The database stores basic information of some STEAM games. Guests can search for games based on game title, genre, company name, or the range of release date. They can also view the games reviews, and see the \"lovers\" of a game. <br>The authenticated (logged-in) users can, on top of that, view information about users whose personal profiles are public, including their names, the games they like, and the game reviews they have posted. They can even follow (or unfollow) other users, like (or unlike) a game, or write (or delete) a game review.",
        "details": "The project originated from my final project of course \"Database Management Systems\". The project's requirements were mainly about the database, and to create a user interface to access the database. I chose to implement this web club out of personal interest.<br>In addition to the above client-side features, there are some server-side features: <ul class='list'><li>Using argon2 cryptographic hashing algorithm to store the password information of registered users.</li><li>Semi-storing game reviews data in the database, so the database only stores the index information, and the review contents are stored locally on the server (accessed by the index information).</li></ul>",
        "demoPics": []
    },
    
    "steam-data-extractor": {
        "name": "STEAM Data Extractor",
        "language": "Python",
        "time": "Mar 2022 - Apr 2022",
        "demoURL": "",
        "githubURL": "https://github.com/FrancesF6/STEAM_data_extractor",
        "about": "Several Python scripts to extract STEAM game data and insert into SQLite3 database",
        "description": "There are six Python scripts in total, four of them are used to retrieve/extract STEAM game data:<br>extract_game_ids.py - download all STEAM game IDs from search and save into a text file;<br>extract_game_data.py - read game IDs, extract the according games data from HTML page, and save to JSON files;<br>extract_game_reviews.py - read game IDs, extracts game reviews & likes data from STEAM's API and save to JSON files, also save review contents into text files, and output a list of userIDs into a text file;<br>extract_user_data.py - read the list of user IDs, extract user data from STEAM's API, save user avatars, and save user data into to a JSON file.<br>The other one, insert_data_sqlite.py, is used to read the extracted data and insert into a SQLite3 databse.",
        "details": "Please refer to the README file: https://github.com/FrancesF6/STEAM_data_extractor/blob/main/README.md",
        "demoPics": []
    },

    "food-ordering-system": {
        "name": "Food Ordering System",
        "language": "JavaScript, Pug, CSS",
        "time": "Sep 2021 - Dec 2021",
        "demoURL": "https://frances-food-ordering.herokuapp.com",
        "githubURL": "https://github.com/FrancesF6/FoodOrderingSystem",
        "about": "A full-stack web application using Node.js and MongoDB",
        "description":
        "This food ordering system simulates online ordering and restaurant data management.<br>A logged-in user can place a new order from a selected restaurant. After the order is successfully placed, the user can rate it. They can also browse the profile and order history of any other user whose profile is set to public.<br>An admin of the system can browse the list of restaurants, add a new restaurant, modify any existing restaurant (including its menu), and can also view the sales statistics of all restaurants, such as their most popular dishes.",
        "details":
        "The project originated from several assignments in the course \"Fundamental of Web Applications\". The assignments' requirements include developing a webpage which allows a user to browse menus for several restaurants, add or remove items and place an order; developing a server capable of tracking sales data for each restaurant, providing functionalities to allow a user to add a new restaurant, modify a restaurant's basic information, add new categories or dishes. They also require support for sessions so that the users can log in, log out, change their privacy settings. The session data, user data and order data should be stored in a local database.<br><br>Besides the assignment requirements, I have added some other features, such as:<ul class='list'><li>Setting three user groups: guest, user and admin. Guests can only browse the user list, users can place new orders, administrators can browse the restaurant list, modify the restaurants, and add new restaurants.</li><li>Setting admin's privileges so that an admin can not only modify the basic information of the restaurant, add new dishes, but can also set whether the restaurant is visible to users, modify or delete any dish in the menu.</li><li>Adding a rating system, so that users can rate their own orders. The server will display the average star rating of each restaurant on the user order page and the restaurant list page.</li><li>Adding some front-end and back-end validations, such as verifying user password security, verifying basic restaurant information, and verifying restaurant menu to ensure the formatting of the menu in the database.</li></ul>",
        "demoPics": [
            {
                "title": "register page",
                "src": "/proj-demo-pics/FOS-register.png"
            },
            {
                "title": "user profile page",
                "src": "/proj-demo-pics/FOS-user-page.png"
            },
            {
                "title": "order page",
                "src": "/proj-demo-pics/FOS-order-page.png"
            },
            {
                "title": "place a new order",
                "src": "/proj-demo-pics/FOS-place-new-order.png"
            },
            {
                "title": "system admin can modify the restaurant",
                "src": "/proj-demo-pics/FOS-admin-modify-a-restaurant.png"
            },
            {
                "title": "system admin can browse list of restaurants",
                "src": "/proj-demo-pics/FOS-admin-restaurants.png"
            },
            {
                "title": "system admin can check the sales stats",
                "src": "/proj-demo-pics/FOS-admin-sales-stats.png"
            }
        ]
    },

    "spacestagram": {
        "name": "Spacestagram",
        "language": "HTML, JavaScript, CSS",
        "time": "Jan 2022",
        "demoURL": "",
        "githubURL": "https://github.com/FrancesF6/Spacestagram",
        "about": "",
        "description":
        "Spacestagram fetches data of daily images from one of NASA's APIs and display the images. A user can like or unlike an image, and get the sharing links for each image through interaction.",
        "details": "",
        "demoPics": [
            {
                "title": "main page",
                "src": "/proj-demo-pics/SpaceSG-main.png"
            },
            {
                "title": "like an image",
                "src": "/proj-demo-pics/SpaceSG-like.png"
            }
        ]
    }
}